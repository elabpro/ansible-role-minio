---
- name: Set the Minio server download base url
  set_fact:
    _minio_server_download_base_url: "https://dl.minio.io/server/minio/release/linux-{{ go_arch }}"
  when: minio_server_download_base_url is undefined

- name: Set the Minio server download base url from local Variable
  set_fact:
    _minio_server_download_base_url: "{{ minio_server_download_base_url }}"
  when: minio_server_download_base_url is defined

- name: Build the Minio server download url with lastest release
  set_fact:
    _minio_server_download_url: "{{ _minio_server_download_base_url }}/minio"
  when: minio_server_release | length == 0

- name: "Build the Minio server download url with release {{ minio_server_release }}"
  set_fact:
    _minio_server_download_url: "{{ _minio_server_download_base_url }}/archive/minio.{{ minio_server_release }}"
  when: minio_server_release | length > 0

- name: "Get the Minio server checksum for {{ go_arch }} architecture"
  set_fact:
    _minio_server_checksum: "{{ lookup('url', _minio_server_download_url + '.sha256sum').split(' ')[0] }}"

- name: Create Minio group
  group:
    name: "{{ minio_group }}"
    state: present

- name: Create Minio user
  user:
    name: "{{ minio_user }}"
    group: "{{ minio_group }}"
    system: "yes"
    shell: "/usr/sbin/nologin"

- name: Create the Minio data storage directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ minio_user }}"
    group: "{{ minio_group }}"
    mode: 0750
  when: minio_server_make_datadirs
  with_items: "{{ minio_server_datadirs }}"

- name: Download the Minio server
  get_url:
    url: "{{ _minio_server_download_url }}"
    dest: "{{ minio_server_bin }}"
    owner: "root"
    group: "root"
    mode: 0755
    checksum: "sha256:{{ _minio_server_checksum }}"
  register: _download_server
  until: _download_server is succeeded
  retries: 5
  delay: 2
  notify: restart minio

- name: Create default certs directories
  file:
    path: "/home/{{ minio_user }}/{{ item }}"
    state: directory
    owner: "{{ minio_user }}"
    group: "{{ minio_group }}"
    mode: 0700
  with_items:
    - .minio/
    - .minio/certs
    - .minio/certs/CAs

- name: Copy TLS certificate to server
  copy:
    src: "{{ copy_minio_ssl_certificate }}" 
    dest: "/home/{{ minio_user }}/.minio/certs/public.crt"
    owner: "{{ minio_user }}"
    group: "{{ minio_group }}"
    mode: '0660'
  when:
    - copy_minio_ssl_certificate is defined and copy_minio_ssl_certificate | length >0
  notify: restart minio

- name: Copy TLS private key to server
  copy:
    src: "{{ copy_minio_ssl_certificate_key }}" 
    dest: "/home/{{ minio_user }}/.minio/certs/private.key"
    owner: "{{ minio_user }}"
    group: "{{ minio_group }}"
    mode: '0660'
  when:
    - copy_minio_ssl_certificate_key is defined and copy_minio_ssl_certificate_key | length >0
  notify: restart minio

- name: Add minio user to ssl-cert group
  user:
    name: "{{ minio_user }}"
    groups: "ssl-cert"
    append: yes
  when:
    - existing_minio_ssl_certificate is defined and existing_minio_ssl_certificate | length >0
    - existing_minio_ssl_certificate_key is defined and existing_minio_ssl_certificate_key | length >0

- name: Create a symbolic link to existing certificate
  file:
    src: "{{ existing_minio_ssl_certificate }}"
    dest: "/home/{{ minio_user }}/.minio/certs/public.crt"
    state: link
    force: yes
  when:
    - existing_minio_ssl_certificate is defined and existing_minio_ssl_certificate | length >0
  notify: restart minio

- name: Create a symbolic link to existing key
  file:
    src: "{{ existing_minio_ssl_certificate_key }}"
    dest: "/home/{{ minio_user }}/.minio/certs/private.key"
    state: link
    force: yes
  when:
    - existing_minio_ssl_certificate_key is defined and existing_minio_ssl_certificate_key | length >0
  notify: restart minio

- name: Generate the Minio server envfile
  template:
    src: minio.env.j2
    dest: "{{ minio_server_envfile }}"
    owner: "root"
    group: "{{ minio_group }}"
    mode: 0640
  notify: restart minio

- name: Create the Minio server systemd config
  template:
    src: minio.service.j2
    dest: "/etc/systemd/system/minio.service"
    owner: "root"
    group: "root"
  when: ansible_service_mgr == "systemd"
  notify:
    - reload minio systemd
    - restart minio

- name: Enable and start the Minio service
  service:
    name: minio
    state: started
    enabled: true

- name: Flush handlers
  meta: flush_handlers

- name: Gather service facts
  service_facts:

- name: Make sure minio service is running
  debug:
    msg: " {{ ansible_facts['services']['minio.service']['state'] }}"
  register: service_result
  failed_when: service_result.msg != ' running'